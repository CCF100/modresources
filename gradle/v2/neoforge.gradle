apply plugin: "com.github.johnrengelman.shadow"

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":Common").loom.accessWidenerPath

    runs {
        configureEach {
            ideConfigGenerated(true)
            runDir("../run")
            vmArgs "-Xms1G", "-Xmx4G", "-Dmixin.debug.export=true"
        }
        client {
            client()
            setConfigName("NeoForge Client ${libs.versions.minecraft.get()}")
        }
        server {
            server()
            setConfigName("NeoForge Server ${libs.versions.minecraft.get()}")
            programArgs("nogui")
        }
        data {
            data()
            setConfigName("NeoForge Data ${libs.versions.minecraft.get()}")
            programArgs("--all", "--mod", modId)
            programArgs("--existing", project(":Common").file("src/main/resources").absolutePath)
            programArgs("--output", project(":Common").file("src/generated/resources").absolutePath)
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        name = "NeoForged"
        url = "https://maven.neoforged.net/releases/"
    }
}

dependencies {
    // Common Project
    common(project(path: ":Common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":Common", configuration: "transformProductionNeoForge")) { transitive = false }

    // NeoForge
    neoForge libs.neoforge.neoforge
}

tasks.withType(Jar).configureEach {
    exclude "architectury.common.json"
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = ""
    atAccessWideners.add("${modId}.accesswidener")
}

sourcesJar {
    def commonSources = project(":Common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

[tasks.modrinth, tasks.curseforge].each { it.finalizedBy project.tasks.refreshUpdateJson }
